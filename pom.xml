<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>io.sensefly.dynamodb-to-s3</groupId>
  <artifactId>dynamodb-to-s3</artifactId>
  <version>1.0.0-SNAPSHOT</version>

  <description>Simple DynamoDB backup to S3</description>

  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>1.5.8.RELEASE</version>
    <relativePath/>
  </parent>

  <properties>
    <docker.image.name>sensefly/dynamodb-to-s3</docker.image.name>

    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

    <java.version>1.8</java.version>
    <kotlin.version>1.1.51</kotlin.version>
    <kotlin.compiler.incremental>true</kotlin.compiler.incremental>

    <aws.version>1.11.220</aws.version>
    <guava.version>23.2-jre</guava.version>
    <jcommander.version>1.72</jcommander.version>
    <json-unit.version>1.25.1</json-unit.version>
    <mockito-kotlin.version>1.5.0</mockito-kotlin.version>
    <s3-stream-upload.version>1.0.1</s3-stream-upload.version>
    <s3mock.version>0.2.3</s3mock.version>

    <dockerfile-plugin.version>1.3.6</dockerfile-plugin.version>
    <jacoco-plugin.version>0.7.9</jacoco-plugin.version>
    <jcabi-dynamodb-plugin.version>0.9.1</jcabi-dynamodb-plugin.version>
    <release-plugin.version>2.5.3</release-plugin.version>

  </properties>

  <dependencies>
    <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-stdlib-jre8</artifactId>
      <version>${kotlin.version}</version>
    </dependency>
    <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-reflect</artifactId>
      <version>${kotlin.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter</artifactId>
      <exclusions>
        <exclusion>
          <groupId>org.springframework.boot</groupId>
          <artifactId>spring-boot-starter-logging</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-log4j2</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
      <exclusions>
        <exclusion>
          <groupId>ch.qos.logback</groupId>
          <artifactId>logback-core</artifactId>
        </exclusion>
        <exclusion>
          <groupId>ch.qos.logback</groupId>
          <artifactId>logback-classic</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.amazonaws</groupId>
      <artifactId>aws-java-sdk-dynamodb</artifactId>
      <version>${aws.version}</version>
    </dependency>
    <dependency>
      <groupId>javax.inject</groupId>
      <artifactId>javax.inject</artifactId>
      <version>1</version>
    </dependency>
    <dependency>
      <groupId>com.github.alexmojaki</groupId>
      <artifactId>s3-stream-upload</artifactId>
      <version>${s3-stream-upload.version}</version>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <version>${guava.version}</version>
    </dependency>
    <dependency>
      <groupId>com.beust</groupId>
      <artifactId>jcommander</artifactId>
      <version>${jcommander.version}</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.module</groupId>
      <artifactId>jackson-module-kotlin</artifactId>
      <version>${jackson.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>net.javacrumbs.json-unit</groupId>
      <artifactId>json-unit</artifactId>
      <version>${json-unit.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.nhaarman</groupId>
      <artifactId>mockito-kotlin-kt1.1</artifactId>
      <version>${mockito-kotlin.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.findify</groupId>
      <artifactId>s3mock_2.12</artifactId>
      <version>${s3mock.version}</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <sourceDirectory>${project.basedir}/src/main/kotlin</sourceDirectory>
    <testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>

    <plugins>

      <plugin>
        <artifactId>maven-resources-plugin</artifactId>
        <executions>
          <execution>
            <id>default-resources</id>
            <phase>validate</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.outputDirectory}</outputDirectory>
              <delimiters>
                <delimiter>@</delimiter>
              </delimiters>
              <useDefaultDelimiters>false</useDefaultDelimiters>
              <resources>
                <resource>
                  <directory>src/main/resources/</directory>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
          <execution>
            <id>docker-resources</id>
            <phase>validate</phase>
            <goals>
              <goal>copy-resources</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}</outputDirectory>
              <delimiters>
                <delimiter>@</delimiter>
              </delimiters>
              <useDefaultDelimiters>false</useDefaultDelimiters>
              <resources>
                <resource>
                  <directory>src/main/docker/</directory>
                  <filtering>true</filtering>
                </resource>
              </resources>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>

      <plugin>
        <artifactId>kotlin-maven-plugin</artifactId>
        <groupId>org.jetbrains.kotlin</groupId>
        <version>${kotlin.version}</version>
        <configuration>
          <compilerPlugins>
            <plugin>spring</plugin>
          </compilerPlugins>
          <jvmTarget>${java.version}</jvmTarget>
        </configuration>
        <executions>
          <execution>
            <id>compile</id>
            <phase>compile</phase>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
          <execution>
            <id>test-compile</id>
            <phase>test-compile</phase>
            <goals>
              <goal>test-compile</goal>
            </goals>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-maven-allopen</artifactId>
            <version>${kotlin.version}</version>
          </dependency>
        </dependencies>
      </plugin>

      <plugin>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>unpack-dynamodb-local</id>
            <goals>
              <goal>unpack</goal>
            </goals>
            <configuration>
              <artifactItems>
                <artifactItem>
                  <groupId>com.jcabi</groupId>
                  <artifactId>DynamoDBLocal</artifactId>
                  <version>2015-07-16</version>
                  <type>zip</type>
                  <outputDirectory>${project.build.directory}/dynamodb-dist</outputDirectory>
                  <overWrite>false</overWrite>
                </artifactItem>
              </artifactItems>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <executions>
          <execution>
            <id>reserve-dynamodb-port</id>
            <goals>
              <goal>reserve-network-port</goal>
            </goals>
            <configuration>
              <portNames>
                <portName>dynamodblocal.port</portName>
                <portName>s3mock.port</portName>
              </portNames>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>com.jcabi</groupId>
        <artifactId>jcabi-dynamodb-maven-plugin</artifactId>
        <version>${jcabi-dynamodb-plugin.version}</version>
        <configuration>
          <tables>
            <table>${project.build.testOutputDirectory}/users-to-backup.json</table>
            <table>${project.build.testOutputDirectory}/users-to-restore.json</table>
          </tables>
        </configuration>
        <executions>
          <execution>
            <id>dynamodb-integration-test</id>
            <goals>
              <goal>start</goal>
              <goal>create-tables</goal>
              <goal>stop</goal>
            </goals>
            <configuration>
              <port>${dynamodblocal.port}</port>
              <dist>${project.build.directory}/dynamodb-dist</dist>
              <arguments>
                <argument>-inMemory</argument>
                <argument>-sharedDb</argument>
              </arguments>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-failsafe-plugin</artifactId>
        <executions>
          <execution>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
            <configuration>
              <includes>
                <include>**/*IT.*</include>
              </includes>
              <!-- tell failsafe about DynamoDBLocal & s3mock port -->
              <systemPropertyVariables>
                <dynamodb.port>${dynamodblocal.port}</dynamodb.port>
                <s3mock.port>${s3mock.port}</s3mock.port>
              </systemPropertyVariables>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${jacoco-plugin.version}</version>
        <executions>
          <execution>
            <id>pre-unit-tests</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
            <configuration>
              <destFile>${project.build.directory}/jacoco-ut.exec</destFile>
            </configuration>
          </execution>
          <execution>
            <id>pre-integration-test</id>
            <goals>
              <goal>prepare-agent-integration</goal>
            </goals>
            <configuration>
              <destFile>${project.build.directory}/jacoco-it.exec</destFile>
            </configuration>
          </execution>
          <!-- Ensures that the code coverage reports are created after tests have been run -->
          <execution>
            <id>post-unit-test</id>
            <phase>test</phase>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
              <dataFile>${project.build.directory}/jacoco-ut.exec</dataFile>
            </configuration>
          </execution>
          <execution>
            <id>post-integration-test</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
              <dataFile>${project.build.directory}/jacoco-it.exec</dataFile>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>com.spotify</groupId>
        <artifactId>dockerfile-maven-plugin</artifactId>
        <version>${dockerfile-plugin.version}</version>
        <executions>
          <execution>
            <id>default</id>
            <phase>package</phase>
            <goals>
              <goal>build</goal>
            </goals>
            <configuration>
              <repository>${docker.image.name}</repository>
              <tag>${project.version}</tag>
              <contextDirectory>${project.build.directory}</contextDirectory>
            </configuration>
          </execution>
          <execution>
            <id>tag</id>
            <goals>
              <goal>tag</goal>
            </goals>
            <configuration>
              <repository>${docker.image.name}</repository>
              <tag>latest</tag>
            </configuration>
          </execution>
          <execution>
            <id>push-latest</id>
            <goals>
              <goal>push</goal>
            </goals>
            <configuration>
              <tag>latest</tag>
            </configuration>
          </execution>
          <execution>
            <id>push-version</id>
            <goals>
              <goal>push</goal>
            </goals>
            <configuration>
              <tag>${project.version}</tag>
            </configuration>
          </execution>
        </executions>
      </plugin>

    </plugins>
  </build>

</project>
